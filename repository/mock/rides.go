// Code generated by MockGen. DO NOT EDIT.
// Source: domain.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hawarir/backend-coding-test"
)

// MockRideRepository is a mock of RideRepository interface.
type MockRideRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRideRepositoryMockRecorder
}

// MockRideRepositoryMockRecorder is the mock recorder for MockRideRepository.
type MockRideRepositoryMockRecorder struct {
	mock *MockRideRepository
}

// NewMockRideRepository creates a new mock instance.
func NewMockRideRepository(ctrl *gomock.Controller) *MockRideRepository {
	mock := &MockRideRepository{ctrl: ctrl}
	mock.recorder = &MockRideRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRideRepository) EXPECT() *MockRideRepositoryMockRecorder {
	return m.recorder
}

// InitTable mocks base method.
func (m *MockRideRepository) InitTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitTable indicates an expected call of InitTable.
func (mr *MockRideRepositoryMockRecorder) InitTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitTable", reflect.TypeOf((*MockRideRepository)(nil).InitTable))
}

// Insert mocks base method.
func (m *MockRideRepository) Insert(arg0 domain.Ride) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRideRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRideRepository)(nil).Insert), arg0)
}

// SelectAll mocks base method.
func (m *MockRideRepository) SelectAll(arg0 domain.Pagination) ([]domain.Ride, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", arg0)
	ret0, _ := ret[0].([]domain.Ride)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockRideRepositoryMockRecorder) SelectAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockRideRepository)(nil).SelectAll), arg0)
}

// SelectByID mocks base method.
func (m *MockRideRepository) SelectByID(arg0 int64) (*domain.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", arg0)
	ret0, _ := ret[0].(*domain.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockRideRepositoryMockRecorder) SelectByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockRideRepository)(nil).SelectByID), arg0)
}
